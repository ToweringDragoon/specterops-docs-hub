name: SpecterOps Complete Documentation Aggregator

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['.github/workflows/*.yml']

env:
  GIT_AUTHOR_NAME: SpecterOps Documentation Bot
  GIT_AUTHOR_EMAIL: docs-bot@specterops.io

jobs:
  aggregate-complete-documentation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install requests pyyaml beautifulsoup4 lxml markdownify
          
      - name: Setup Directory Structure
        run: |
          rm -rf docs/tools/*
          mkdir -p docs/tools/{core-platforms,c2-frameworks,data-analysis,utilities,browse}
      
      - name: Create Tagging System
        run: |
          cat > tagging_system.py << 'EOF'
          import json
          import re
          from pathlib import Path
          from collections import defaultdict
          import yaml
          
          class SpecterOpsTagging:
              def __init__(self):
                  self.manual_tags = {
                      "bloodhound_community_edition": {
                          "platforms": ["windows", "linux", "macos"],
                          "techniques": ["reconnaissance", "lateral-movement"],
                          "environments": ["active-directory", "azure"],
                          "categories": ["data-analysis", "enumeration"],
                          "roles": ["red-team", "blue-team"],
                          "difficulty": ["intermediate"]
                      },
                      "mythic_c2": {
                          "platforms": ["windows", "macos", "linux"],
                          "techniques": ["command-control", "execution", "persistence"],
                          "environments": ["active-directory", "azure"],
                          "categories": ["c2-framework", "post-exploitation"],
                          "roles": ["red-team", "consultant"],
                          "difficulty": ["intermediate", "advanced"]
                      },
                      "ghostwriter": {
                          "platforms": ["cross-platform"],
                          "categories": ["reporting", "infrastructure"],
                          "roles": ["red-team", "consultant", "blue-team"],
                          "difficulty": ["beginner", "intermediate"],
                          "integrations": ["mythic", "cobalt-strike"]
                      },
                      "nemesis": {
                          "platforms": ["cross-platform"],
                          "techniques": ["collection", "reconnaissance"],
                          "environments": ["active-directory", "azure"],
                          "categories": ["data-analysis", "post-exploitation"],
                          "roles": ["red-team", "researcher"],
                          "difficulty": ["advanced"]
                      },
                      "sharpsccm": {
                          "platforms": ["windows"],
                          "techniques": ["lateral-movement", "privilege-escalation"],
                          "environments": ["active-directory"],
                          "categories": ["post-exploitation", "enumeration"],
                          "roles": ["red-team"],
                          "difficulty": ["intermediate"]
                      },
                      "sharphound": {
                          "platforms": ["windows"],
                          "techniques": ["reconnaissance"],
                          "environments": ["active-directory"],
                          "categories": ["enumeration", "data-analysis"],
                          "roles": ["red-team", "blue-team"],
                          "difficulty": ["beginner"],
                          "integrations": ["bloodhound"]
                      }
                  }
              
              def get_tool_tags(self, tool_name):
                  safe_name = re.sub(r'[^\w\-]', '_', tool_name.lower()).replace(' ', '_')
                  return self.manual_tags.get(safe_name, {})
              
              def add_tags_to_frontmatter(self, frontmatter, tags):
                  if tags:
                      frontmatter["tags"] = []
                      frontmatter["tag_categories"] = {}
                      
                      for category, tag_list in tags.items():
                          if tag_list:
                              frontmatter["tag_categories"][category] = tag_list
                              frontmatter["tags"].extend(tag_list)
                  
                  return frontmatter
              
              def create_tag_display(self, tags):
                  if not tags:
                      return ""
                  
                  display = ""
                  for category, tag_list in tags.items():
                      if tag_list:
                          category_name = category.replace("-", " ").title()
                          tag_names = [tag.replace("-", " ").title() for tag in tag_list]
                          display += f"**{category_name}**: {', '.join(tag_names)}\n\n"
                  
                  return display + "\n"
          EOF
      
      - name: Process Complete Documentation
        run: |
          cd scripts
          python complete_docs_processor.py
      
      - name: Create Browse Pages
        run: |
          python -c "
          exec(open('tagging_system.py').read())
          from pathlib import Path
          import json
          
          # Create simple browse structure
          browse_dir = Path('docs/tools/browse')
          browse_dir.mkdir(exist_ok=True)
          
          with open(browse_dir / 'index.md', 'w') as f:
              f.write('''---
          title: \"Browse Tools by Tags\"
          description: \"Find SpecterOps tools by category\"
          ---
          
          # Browse Tools by Tags
          
          <CardGroup cols={2}>
            <Card title=\"By Platform\" href=\"./platforms\">
              Windows, macOS, Linux, Cross-platform
            </Card>
            <Card title=\"By Technique\" href=\"./techniques\">
              Reconnaissance, Lateral Movement, etc.
            </Card>
            <Card title=\"By Environment\" href=\"./environments\">
              Active Directory, Azure, AWS
            </Card>
            <Card title=\"By Role\" href=\"./roles\">
              Red Team, Blue Team, Research
            </Card>
          </CardGroup>
          ''')
          
          # Create basic category pages
          categories = ['platforms', 'techniques', 'environments', 'roles']
          for category in categories:
              with open(browse_dir / f'{category}.md', 'w') as f:
                  title = category.replace('-', ' ').title()
                  f.write(f'''---
          title: \"Browse by {title}\"
          description: \"Find tools by {title.lower()}\"
          ---
          
          # Browse by {title}
          
          Browse tools organized by {title.lower()}.
          ''')
          "
      
      - name: Create Updated Mintlify Configuration
        run: |
          cat > mint.json << 'EOF'
          {
            "$schema": "https://mintlify.com/schema.json",
            "name": "SpecterOps Documentation Hub",
            "logo": {
              "dark": "/logo/specterops-dark.svg",
              "light": "/logo/specterops-light.svg"
            },
            "favicon": "/favicon.ico",
            "colors": {
              "primary": "#FF4B4B",
              "light": "#FF6B6B",
              "dark": "#E53E3E"
            },
            "topbarCtaButton": {
              "name": "SpecterOps",
              "url": "https://specterops.io"
            },
            "navigation": [
              {
                "group": "Getting Started",
                "pages": [
                  "docs/tools/browse/index"
                ]
              },
              {
                "group": "Browse by Tags",
                "pages": [
                  "docs/tools/browse/platforms",
                  "docs/tools/browse/techniques", 
                  "docs/tools/browse/environments",
                  "docs/tools/browse/roles"
                ]
              },
              {
                "group": "Core Platforms",
                "pages": [
                  "docs/tools/core-platforms/bloodhound_community_edition/index",
                  "docs/tools/core-platforms/ghostwriter/index",
                  "docs/tools/core-platforms/nemesis/index"
                ]
              },
              {
                "group": "C2 Frameworks",
                "pages": [
                  "docs/tools/c2-frameworks/mythic_c2/index"
                ]
              },
              {
                "group": "Utilities",
                "pages": [
                  "docs/tools/utilities/sharpsccm/index",
                  "docs/tools/utilities/sharphound/index"
                ]
              }
            ],
            "footerSocials": {
              "github": "https://github.com/SpecterOps",
              "x": "https://x.com/specterops"
            },
            "search": {
              "prompt": "Search tools, techniques, platforms..."
            }
          }
          EOF
      
      - name: Commit and Push Changes
        run: |
          git config --local user.email "${{ env.GIT_AUTHOR_EMAIL }}"
          git config --local user.name "${{ env.GIT_AUTHOR_NAME }}"
          
          git add docs/ mint.json
          
          if ! git diff --staged --quiet; then
            TOOL_COUNT=$(find docs/tools -name "*.md" -not -path "docs/tools/browse/*" | wc -l)
            
            git commit -m "🔄 Update SpecterOps complete documentation

            Features:
            - GitHub Wiki: Full wiki content and navigation
            - GitBook: Complete GitBook sites converted
            - Mintlify Sites: Existing documentation sites
            - External Docs: Full documentation sites like docs.mythic-c2.net
            - Smart tagging system with browse functionality
            
            Generated: ${TOOL_COUNT} documentation pages
            Updated: $(date '+%Y-%m-%d %H:%M UTC')"
            
            git push
            echo "✅ Complete documentation updated successfully"
          else
            echo "No changes to commit"
          fi
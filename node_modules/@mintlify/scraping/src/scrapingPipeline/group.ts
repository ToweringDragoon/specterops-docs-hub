import type { Browser } from 'puppeteer';

import type { Result } from '../types/result.js';
import { getErrorMessage } from '../utils/errors.js';
import { log } from '../utils/log.js';
import { fetchPageHtml, startPuppeteer } from '../utils/network.js';
import { scrapePage } from './page.js';

export async function scrapePageGroup(
  navGroup: Array<URL>,
  needsBrowser: boolean,
  opts: {
    externalLinks: boolean;
    rootPaths?: Array<string>;
  } = { externalLinks: false }
): Promise<Array<Result<[string, string]>>> {
  const browser: Browser | undefined = needsBrowser ? await startPuppeteer() : undefined;

  try {
    const res = await Promise.all(
      navGroup.map(async (url, index) => {
        try {
          if (opts.externalLinks) {
            const res = scrapePage(`external-link-${index}`, url, { externalLink: true });
            return res;
          }

          let isOverviewPage = false;
          if (url.toString().endsWith('/mintie_overview')) {
            isOverviewPage = true;
            url = new URL(url.toString().replace('/mintie_overview', ''));
          }

          const html = await fetchPageHtml(url, browser);
          const res = scrapePage(html, url, {
            externalLink: false,
            isOverviewPage,
            rootPath: opts.rootPaths ? opts.rootPaths[index] : undefined,
          });
          return res;
        } catch (error) {
          const errorMessage = getErrorMessage(error);
          throw new Error(`We encountered an error when scraping ${url}${errorMessage}`);
        }
      })
    );
    return res;
  } catch (error) {
    const errorMessage = getErrorMessage(error);
    log(
      `We encountered an error when scraping the page group from ${
        navGroup[0]?.origin ?? 'the URL provided'
      }${errorMessage}`
    );
    console.error(error);
    throw error;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

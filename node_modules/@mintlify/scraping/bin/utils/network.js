import { launch } from 'puppeteer';
import { getErrorMessage } from './errors.js';
import { log } from './log.js';
async function exponentialBackoff(operation, retries = 3, delay = 1000, factor = 2) {
    try {
        return await operation();
    }
    catch (error) {
        if (retries > 0) {
            await new Promise((resolve) => setTimeout(resolve, delay));
            return exponentialBackoff(operation, retries - 1, delay * factor, factor);
        }
        else {
            throw error;
        }
    }
}
export async function startPuppeteer() {
    try {
        return await launch({
            headless: true,
            ignoreHTTPSErrors: true,
        });
    }
    catch (error) {
        if (error instanceof Error) {
            log(`Could not create a browser instance: ${error.message}`);
        }
    }
}
export async function getHtmlWithPuppeteer(browser, url) {
    const page = await browser.newPage();
    await page.goto(url.toString(), {
        waitUntil: 'networkidle2',
    });
    const html = await exponentialBackoff(() => page.content());
    return html;
}
async function fetchPageResponse(url) {
    try {
        const res = await fetch(url);
        if (!res.ok) {
            throw new Error(`${res.status} ${res.statusText}`);
        }
        return await res.text();
    }
    catch (error) {
        const errorMessage = getErrorMessage(error);
        throw new Error(`${url}\n\t- failed to fetch page from source${errorMessage}`);
    }
}
export async function fetchPageHtml(url, browser = undefined) {
    if (browser) {
        try {
            const res = await getHtmlWithPuppeteer(browser, url);
            if (res)
                return res;
            throw new Error('an unknown error occured');
        }
        catch (error) {
            const errorMessage = getErrorMessage(error);
            throw new Error(`${url}\n\t- Puppeteer failed to retrieve page from source${errorMessage}`);
        }
    }
    return await exponentialBackoff(() => fetchPageResponse(url));
}
export async function fetchImage(url) {
    try {
        const res = await exponentialBackoff(() => fetch(url));
        if (!res.ok) {
            throw new Error(`${res.status} ${res.statusText}`);
        }
        const imageBuffer = await res.arrayBuffer();
        const imageData = new Uint8Array(imageBuffer);
        return imageData;
    }
    catch (error) {
        const errorMessage = getErrorMessage(error);
        throw new Error(`${url}\n\t- failed to retrieve image from source${errorMessage}`);
    }
}
//# sourceMappingURL=network.js.map
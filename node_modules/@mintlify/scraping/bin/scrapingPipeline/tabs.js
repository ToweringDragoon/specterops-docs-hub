import { retrieveTabLinks } from '../tabs/retrieveReadme.js';
import { detectFramework, framework } from '../utils/detectFramework.js';
import { log } from '../utils/log.js';
import { fetchPageHtml, startPuppeteer } from '../utils/network.js';
import { getTitleFromLink } from '../utils/title.js';
import { downloadFavicon } from './icon.js';
import { downloadLogos } from './logo.js';
import { htmlToHast } from './root.js';
import { scrapeSite } from './site.js';
export async function scrapeAllSiteTabs(html, url) {
    const hast = htmlToHast(html);
    url = new URL(url);
    detectFramework(hast);
    const needsBrowser = framework.vendor === 'gitbook';
    const browser = needsBrowser ? await startPuppeteer() : undefined;
    const favicon = await downloadFavicon(hast);
    const logo = await downloadLogos(url, browser);
    if (framework.vendor === 'readme' || framework.vendor === 'docusaurus') {
        const links = retrieveTabLinks(hast);
        if (!links ||
            !links.length ||
            (links.length === 1 && links[0] && links[0].url === url.pathname))
            return scrapeSite(html, url, { hast });
        if (!links.find((link) => url.pathname.startsWith(link.url))) {
            links.push({
                name: getTitleFromLink(url.pathname),
                url: url.pathname,
            });
        }
        const results = await Promise.all(links.map(async (tabEntry) => {
            const newUrl = new URL(url);
            newUrl.pathname = tabEntry.url;
            const newHtml = await fetchPageHtml(newUrl, undefined);
            return await scrapeSite(newHtml, newUrl, { tabs: [tabEntry] });
        }));
        const navigations = [];
        const tabs = [];
        const successes = results.filter((result) => result.success);
        successes.forEach((result) => {
            if (!result.data)
                return;
            navigations.push(...result.data.navigation);
            if (result.data.tabs)
                tabs.push(...result.data.tabs);
        });
        const failures = results.filter((result) => !result.success);
        failures.forEach((result) => {
            log('Failed to scrape tab: ' + result.message);
        });
        return {
            success: true,
            data: {
                $schema: 'https://mintlify.com/schema.json',
                name: '',
                logo,
                colors: {
                    primary: '',
                },
                favicon: favicon ?? '',
                navigation: navigations,
                tabs,
            },
        };
    }
    return scrapeSite(html, url, { hast });
}
//# sourceMappingURL=tabs.js.map
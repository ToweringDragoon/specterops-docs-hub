var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { validate } from '@mintlify/openapi-parser';
import { truncateCircularReferences } from './truncateCircularReferences.js';
function openApiCheck(document_1) {
    return __awaiter(this, arguments, void 0, function* (document, truncate = false) {
        try {
            const { errors, schema, valid, version } = yield validate(document);
            if (!version || version === '2.0')
                throw new Error('OpenAPI versions prior to 3.0 not supported');
            if (!valid) {
                const errorMessages = errors
                    ? errors
                        .map((error) => {
                        const path = 'path' in error
                            ? String(error.path)
                                .replace('/paths/', '')
                                .replaceAll('~1', '/')
                                .replaceAll('~2', '~')
                            : 'Unknown path';
                        return `${path}: ${error.message}`;
                    })
                        .join('\n')
                    : 'An unknown error occurred when trying to validate your OpenAPI spec. Please pass it through an OpenAPI validator and try again.';
                console.error(errorMessages);
                throw new Error(`Failed to validate OpenAPI schema:${errorMessages}`);
            }
            if (!schema)
                throw new Error('Schema failed to validate. Please try again.');
            // truncation can be costly, so only do it when necessary
            return truncate ? truncateCircularReferences(schema, 2) : schema;
        }
        catch (_a) {
            return undefined;
        }
    });
}
export { openApiCheck };
